lwd = 10, cex=0.7, bty="n"
)
legend("topright", legend = c(expression("8 " (degree~C) " / 12:30"), expression("8 " (degree~C) " / 20:30"), expression("8 " (degree~C) " / 01:30")))
expression("8 " degree~C " / 12:30"
legend("topright", legend = c(expression("8 " degree~C " / 12:30"), expression("8 " (degree~C) " / 20:30"), expression("8 " (degree~C) " / 01:30"),
expression("15 " (degree*C) " / 12:30") ,expression("15 " (degree*C) " / 20:30"), expression("15 " (degree*C) " / 01:30")) # category labels
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
legend("topright", legend = c(expression("8 " degree~C " / 12:30"), expression("8 " degree~C " / 20:30"), expression("8 " degree~C " / 01:30"),
expression("15 " degree~C " / 12:30") ,expression("15 " degree~C " / 20:30"), expression("15 " degree~C " / 01:30")) # category labels
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
legend("topright", legend = c(expression("8 " degree*C " / 12:30"), expression("8 " degree*C " / 20:30"), expression("8 " degree*C " / 01:30"),
expression("15 " degree*C " / 12:30") ,expression("15 " degree*C " / 20:30"), expression("15 " degree*C " / 01:30")) # category labels
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
legend("topright", legend = c(expression("8 " *degree*C " / 12:30"), expression("8 " *degree*C " / 20:30"), expression("8 " *degree*C " / 01:30"),
expression("15 " *degree*C " / 12:30") ,expression("15 " *degree*C " / 20:30"), expression("15 " *degree*C " / 01:30")) # category labels
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
legend("topright", legend = c(expression(8*degree*C " / 12:30"), expression("8 " *degree*C " / 20:30"), expression("8 " *degree*C " / 01:30"),
expression(8*degree*C " / 12:30")
expression(8*degree*C " / 12:30")
legend("topright", legend = c(expression(8*degree*C " / 12:30"), expression(8*degree*C " / 20:30"), expression(8*degree*C " / 01:30"),
plot.new()
par(lend="square")
legend("center", legend = c("cold 12:30", "cold 20:30", "cold 01:30",
"warm 12:30", "warm 20:30", "warm 01:30"), # category labels
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
legend("topright", legend = c(expression(8*degree*C " / 12:30"), expression(8*degree*C " / 20:30"), expression(8*degree*C " / 01:30"),
expression("15 " *degree*C " / 12:30") ,expression("15 " *degree*C " / 20:30"), expression("15 " *degree*C " / 01:30")) # category labels
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
install.packages("plotmath")
install.packages("grDevices")
install.packages("grDevices")
legend("center", legend=expression(8*degree*C))
legend("center", legend=expression(8*degree*C "12:30"))
expression(paste(8*degree*C), " / 12:30", sep=""
)
legend("center", legend=expression(paste(8*degree*C), " / 12:30", sep=""))
legend("topright", legend = c(expression(paste(8*degree*C, " / 12:30", sep=""),
expression(paste(8*degree*C, " / 20:30", sep=""),
expression(paste(8*degree*C, " / 01:30", sep=""),
expression(paste(15*degree*C, " / 12:30", sep=""),
expression(paste(15*degree*C, " / 20:30", sep=""),
expression(paste(15*degree*C, " / 01:30", sep=""),
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
)
()()()()
;
legend("topright", legend = c(expression(paste(8*degree*C, " / 12:30", sep="")),
expression(paste(8*degree*C, " / 20:30", sep="")),
expression(paste(8*degree*C, " / 01:30", sep="")),
expression(paste(15*degree*C, " / 12:30", sep="")),
expression(paste(15*degree*C, " / 20:30", sep="")),
expression(paste(15*degree*C, " / 01:30", sep="")),
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
selected_clust<-unique(row.names(merged_W_tp))
heat_data<- as.matrix(Log_cpm_data[selected_clust,c(1,2,3,7,8,9,13,14,15,4,5,6,10,11,12,16,17,18)])
hc_heat_data_row <- hclust(as.dist(1-cor(t(heat_data))), method="average")
pdf(file="heatmap_tp_genes.pdf")
par(mar= c(0.5,0.5,1,1))
heatmap.2(heat_data, scale="row", col=hmcol,margins=c(5,5), dendrogram="row",Rowv=as.dendrogram(hc_heat_data_row),
Colv=NA,trace="none", labRow = NA, labCol = NA,
ColSideColors=c("steelblue1","steelblue1", "steelblue1",
"steelblue3", "steelblue3","steelblue3",
"steelblue4","steelblue4", "steelblue4",
"orange", "orange", "orange",
"tomato", "tomato", "tomato",
"hotpink3", "hotpink3", "hotpink3"),
cexCol=0.9, key=TRUE, density.info="density", main="",
symkey=TRUE, key.par=list(cex.axis=0.8), key.title=NA, keysize=1)
par(lend="square")
legend("topright", legend = c(expression(paste(8*degree*C, " / 12:30", sep="")),
expression(paste(8*degree*C, " / 20:30", sep="")),
expression(paste(8*degree*C, " / 01:30", sep="")),
expression(paste(15*degree*C, " / 12:30", sep="")),
expression(paste(15*degree*C, " / 20:30", sep="")),
expression(paste(15*degree*C, " / 01:30", sep="")),
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
dev.off()
library(gplots)
length(selected_clust)
selected_clust<-unique(row.names(merged_W_tp))
length(selected_clust)
heat_data<- as.matrix(Log_cpm_data[selected_clust,c(1,2,3,7,8,9,13,14,15,4,5,6,10,11,12,16,17,18)])
hc_heat_data_row <- hclust(as.dist(1-cor(t(heat_data))), method="average")
pdf(file="heatmap_tp_genes.pdf")
par(mar= c(0.5,0.5,1,1))
heatmap.2(heat_data, scale="row", col=hmcol,margins=c(5,5), dendrogram="row",Rowv=as.dendrogram(hc_heat_data_row),
Colv=NA,trace="none", labRow = NA, labCol = NA,
ColSideColors=c("steelblue1","steelblue1", "steelblue1",
"steelblue3", "steelblue3","steelblue3",
"steelblue4","steelblue4", "steelblue4",
"orange", "orange", "orange",
"tomato", "tomato", "tomato",
"hotpink3", "hotpink3", "hotpink3"),
cexCol=0.9, key=TRUE, density.info="density", main="",
symkey=TRUE, key.par=list(cex.axis=0.8), key.title=NA, keysize=1)
par(lend="square")
legend("topright", legend = c(expression(paste(8*degree*C, " / 12:30", sep="")),
expression(paste(8*degree*C, " / 20:30", sep="")),
expression(paste(8*degree*C, " / 01:30", sep="")),
expression(paste(15*degree*C, " / 12:30", sep="")),
expression(paste(15*degree*C, " / 20:30", sep="")),
expression(paste(15*degree*C, " / 01:30", sep=""))),
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
dev.off()
pdf(file="heatmap_tp_genes.pdf")
par(mar= c(0.5,0.5,1,1))
heatmap.2(heat_data, scale="row", col=hmcol,margins=c(5,5), dendrogram="row",Rowv=as.dendrogram(hc_heat_data_row),
Colv=NA,trace="none", labRow = NA,
ColSideColors=c("steelblue1","steelblue1", "steelblue1",
"steelblue3", "steelblue3","steelblue3",
"steelblue4","steelblue4", "steelblue4",
"orange", "orange", "orange",
"tomato", "tomato", "tomato",
"hotpink3", "hotpink3", "hotpink3"),
cexCol=0.9, key=TRUE, density.info="density", main="",
symkey=TRUE, key.par=list(cex.axis=0.8), key.title=NA, keysize=1)
par(lend="square")
legend("topright", legend = c(expression(paste(8*degree*C, " / 12:30", sep="")),
expression(paste(8*degree*C, " / 20:30", sep="")),
expression(paste(8*degree*C, " / 01:30", sep="")),
expression(paste(15*degree*C, " / 12:30", sep="")),
expression(paste(15*degree*C, " / 20:30", sep="")),
expression(paste(15*degree*C, " / 01:30", sep=""))),
col = c("steelblue1", "steelblue3", "steelblue4","orange", "tomato","hotpink3"),  # color key
lty= 1,             # line style
lwd = 10, cex=0.7, bty="n"
)
dev.off()
citation()
library(lme4)
?anova
library(lmerTest)
library(car)
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Oct18.RData")
Anova(glmer_exp)
library(lme4)
library(lmerTest)
Anova(glmer_exp)
anova(glmer_exp)
Anova(glmer_exp)
anova(lmer_act_all)
summary(km.by.group)
### 2.2 Linear mixed model on the effect of sex on minimum metabolic rate
# including chamber as random effect, body mass as covariate and the interaction of population and sex as fixed effect
lmer_metabmin_sex<- lmer(Min_O2_mg_h ~ Photoperiod + pop + selection + Temp + Mass_kg_postMR + sex
+ pop:selection + pop:Photoperiod + Mass_kg_postMR:pop
+(1|Metab_chamber), data= Metabdata_sex, na.action=na.exclude)
### 2.2 Linear mixed model on the effect of sex on minimum metabolic rate
# including chamber as random effect, body mass as covariate and the interaction of population and sex as fixed effect
## For sex effect model, subset data (not all individuals were sexed)
Metabdata_sex<-subset(Metabdata, Sex ==1 | Sex == -1)
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Metabdata_models_Oct18.RData")
### 2.2 Linear mixed model on the effect of sex on minimum metabolic rate
# including chamber as random effect, body mass as covariate and the interaction of population and sex as fixed effect
## For sex effect model, subset data (not all individuals were sexed)
Metabdata_sex<-subset(Metabdata, Sex ==1 | Sex == -1)
lmer_metabmin_sex<- lmer(Min_O2_mg_h ~ Photoperiod + pop + selection + Temp + Mass_kg_postMR + sex
+ pop:selection + pop:Photoperiod + Mass_kg_postMR:pop
+(1|Metab_chamber), data= Metabdata_sex, na.action=na.exclude)
lmer_metabmin_sex<- lmer(Min_O2_mg_h ~ Photoperiod + pop + selection + Temp + Mass_kg_postMR + Sex
+ pop:selection + pop:Photoperiod + Mass_kg_postMR:pop
+(1|Metab_chamber), data= Metabdata_sex, na.action=na.exclude)
summary(lmer_metabmin_sex)
# No sex effect
# Check residuals
qqnorm(residuals(lmer_metabmin_sex, type="pearson"))
qqline(residuals(lmer_metabmin_sex, type="pearson"))
plot(fitted(lmer_metabmin_sex),resid(lmer_metabmin_sex, type="pearson"))
mywhiskers(fitted(lmer_metabmin_sex),resid(lmer_metabmin_sex, type="pearson"), add=T, se=F) # This adds lines which should be roughly equal length across fitted values
library(lmfor)
mywhiskers(fitted(lmer_metabmin_sex),resid(lmer_metabmin_sex, type="pearson"), add=T, se=F) # This adds lines which should be roughly equal length across fitted values
### 3.3. Sex effect on average MR
lm_metabave_sex<-lmer_metab_ave<-lmer(Ave_O2_mg_h ~ Photoperiod + pop + selection + Temp + Mass_kg_postMR + Sex
+ pop:selection + pop:Photoperiod + pop:Mass_kg_postMR
+(1|Metab_chamber), data= Metabdata_sex)
summary(lm_metabave_sex)
rm(lm_metabave_sex)
### 3.3. Sex effect on average MR
lmer_metabave_sex<-lmer_metab_ave<-lmer(Ave_O2_mg_h ~ Photoperiod + pop + selection + Temp + Mass_kg_postMR + Sex
+ pop:selection + pop:Photoperiod + pop:Mass_kg_postMR
+(1|Metab_chamber), data= Metabdata_sex)
plot(lmer_metabave_sex)
cort_sex<-lm(cort_ng_ml ~ pop + selection + Sex +  Temp_on_stress_test + scale(Length_mm_end) + Stress_test_serial,
data= stressgroup)
summary(cort_sex)
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Metabdata_models_Oct18.RData")
library(lme4)
library(car)
library(patchwork)
library(lmfor)
library(lmerTest)
Anova(lmer_metab_full, type = 2)
Anova(lmer_metab_full, type = 1)
Anova(lmer_metab_full, type = 3)
Anova(lmer_metab_ave, type = 2)
Anova(lmer_metab_ave, type = 3)
#### 3. Models for average metabolic rate
### 3.1. Full model for average metabolic rate
lmer_metab_ave<-lmer(Ave_O2_mg_h ~ Photoperiod + pop + selection + Temp + Mass_kg_centr
+ pop:selection + pop:Photoperiod + Mass_kg_centr:pop
+(1|Metab_chamber), data= Metabdata)
summary(lmer_metab_ave)
Anova(lmer_metab_ave, type = 3)
Anova(lmer_metab_ave, type = 2)
anova(lmer_metab_ave)
anova(lmer_metab_ave, type=2)
anova(lmer_metab_full, type = 2)
summary(lmer_metab_full) #inappropriate sums of sq.
anova(lmer_metab_full, type = 2)
anova(lmer_metab_full, type = 3)
anova(lmer_metab_ave, type=2)
anova(lmer_metab_ave, type=3)
Anova(lmer_metab_ave, type=1)
Anova(lmer_metab_ave, type=2)
Anova(lmer_metab_full, type = 3)
anova(lmer_metab_full, type = 3)
Anova(lmer_metab_full, type = 2)
anova(lmer_metab_full, type = 2)
anova(lmer_metab_ave, type=2)
Anova(lmer_metab_ave, type=2)
anova(lmer_metab_ave, type=2, ddf="Kenward-Roger")
anova(lmer_metab_ave, type=3, ddf="Kenward-Roger")
anova(lmer_metab_ave, type=3)
anova(lmer_metab_full, type = 2, ddf="Kenward-Roger")
anova(lmer_metab_full, type = 3, ddf="Kenward-Roger")
lmer_metabmin_sex<- lmer(Min_O2_mg_h ~ pop + selection + Temp + Mass_kg_centr + Sex
+ pop:selection + Mass_kg_centr:pop
+(1|Metab_chamber), data= Metabdata_sex, na.action=na.exclude)
summary(lmer_metabmin_sex)
anova(lmer_metabmin_sex, type=3)
# Check residuals
qqnorm(residuals(lmer_metabmin_sex, type="pearson"))
qqline(residuals(lmer_metabmin_sex, type="pearson"))
plot(fitted(lmer_metabmin_sex),resid(lmer_metabmin_sex, type="pearson"))
mywhiskers(fitted(lmer_metabmin_sex),resid(lmer_metabmin_sex, type="pearson"), add=T, se=F) # This adds lines which should be roughly equal length across fitted values
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Oct18.RData")
library(ggplot2)
library(lme4)
library(lmerTest)
library(coxme)
library(survival)
library(lmfor)
library(nlme)
### 2.1. GLMM for exploration (1=yes, 0=no), all trials included
glmer_exp<-glmer(Explorated ~ Selection + Treatment + Repeat
+ (1|ID) + (1|Arena) + (1|Batch),
data=Behavior_data, family=binomial(link="logit"))
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/PM_trials_results/Final_pm_BehModels_jenni.RData")
summary(glmer_exp)
### 2.1. GLMM for exploration (1=yes, 0=no), all trials included
glmer_exp<-glmer(Explorated ~ Selection + Treatment + Repeat
+ (Treatment-1|ID) + (1|Arena) + (1|Batch),
data=Behavior_data, family=binomial(link="logit"))
summary(glmer_exp)
# Install source packages to use ggeffects:
#library(devtools)
#devtools::install_github("strengejacke/sjlabelled")
#devtools::install_github("strengejacke/sjmisc")
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
#devtools::install_github("strengejacke/sjstats")
#devtools::install_github("strengejacke/ggeffects")
library(ggeffects)
library(drc)
citation("drc")
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Metabdata_models_Jan19.RData")
boxplot(cort_data$cort_ng_ml~cort_data$Sex)
plot_pred_MO2min+ plot_pred_MO2ave +
plot_layout(ncol = 2)+
plot_annotation(tag_levels = "A")
library(patchwork)
plot_pred_MO2min+ plot_pred_MO2ave +
plot_layout(ncol = 2)+
plot_annotation(tag_levels = "A")
library(ggplot2)
library(lme4)
library(car)
library(patchwork)
library(lmfor)
library(lmerTest)
plot_pred_MO2min+ plot_pred_MO2ave +
plot_layout(ncol = 2)+
plot_annotation(tag_levels = "A")
pred_cort_plot
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Oct18.RData")
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
library(lme4)
library(lmerTest)
library(coxme)
library(survival)
library(lmfor)
library(nlme)
library(car)
# Install source packages to use ggeffects:
#library(devtools)
#devtools::install_github("strengejacke/sjlabelled")
#devtools::install_github("strengejacke/sjmisc")
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
#devtools::install_github("strengejacke/sjstats")
#devtools::install_github("strengejacke/ggeffects")
library(ggeffects)
mixed_cox
summary(lmer_act_all2)
power.anova.test(groups = 2, n = NULL,
between.var = 80, within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = var(c(2.16, 2, 1.56)), within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = 30, within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = 4, within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = 2, within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = 1, within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = 3, within.var = 2,
sig.level = 0.05, power = 0.8)
power.anova.test(groups = 2, n = NULL,
between.var = 3, within.var = 2,
sig.level = 0.05, power = 0.9)
power.anova.test(groups = 2, n = NULL,
between.var = 3, within.var = 2,
sig.level = 0.05, power = 0.99)
power.anova.test(groups = 2, n = NULL,
between.var = 4, within.var = 2,
sig.level = 0.05, power = 0.99)
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Feb19.RData")
## Test the two models with likelihood ratio test
anova(glmer_exp, glmer_exp02) #better fit in 1, keep Arena in model
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/PM_trials_results/Final_pm_BehModels_jenni.RData")
# Run LRT
anova(glmer_exp, glmer_exp02) #No difference, use second model.
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Feb19.RData")
lht(lmer_act_all2,
hypothesis.matrix = c("PopVAA = 0", "PopVAA:SelectionLV = 0", "Photoperiod24:PopVAA = 0"), test = "F")
library(lmfor)
library(nlme)
library(car)
# Install source packages to use ggeffects:
#library(devtools)
#devtools::install_github("strengejacke/sjlabelled")
#devtools::install_github("strengejacke/sjmisc")
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
#devtools::install_github("strengejacke/sjstats")
#devtools::install_github("strengejacke/ggeffects")
library(ggeffects)
library(blmeco)
lht(lmer_act_all2,
hypothesis.matrix = c("PopVAA = 0", "PopVAA:SelectionLV = 0", "Photoperiod24:PopVAA = 0"), test = "F")
# Test selection line
lht(lmer_act_all2,
hypothesis.matrix = c("PopVAA:SelectionLV = 0", "SelectionLV = 0"),
test = "F")
anova(lmer_act_all2, type="3")
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Metabdata_models_Mar19.RData")
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Feb19.RData")
# MO2ave residuals
MO2ave_resid<- data_frame(ID = Metabdata$Fish_ID,
resid_MO2ave = resid(lmer_metab_ave))
############################################################################
### Models for behaviour data from angling selection experiment.
### Jenni Prokkola 2019
### Prokkola et al.
############################################################################
library(ggplot2)
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
library(lme4)
library(lmerTest)
library(coxme)
library(survival)
library(lmfor)
library(nlme)
library(car)
library(tidyverse)
# MO2ave residuals
MO2ave_resid<- data_frame(ID = Metabdata$Fish_ID,
resid_MO2ave = resid(lmer_metab_ave))
# merge BLUPs with MO2min residuals
act_MO2ave<-merge(act_BLUPs, MO2ave_resid, by = "ID")
### 3. Explore correlations between behaviour and metabolic traits.
# 3.1. Activity and MO2min. Get predictions of individual activity (BLUPS)
act_BLUPs<- data_frame(ID = row.names(ranef(lmer_act_all2)$ID),
act_BLUP = ranef(lmer_act_all2)$ID[,"(Intercept)"])
# merge BLUPs with MO2min residuals
act_MO2ave<-merge(act_BLUPs, MO2ave_resid, by = "ID")
cor.test(act_MO2ave$act_BLUP,act_MO2ave$resid_MO2ave)
plot_act_MO2ave<-ggplot(act_MO2ave, aes(x=resid_MO2ave, y=act_BLUP))+
geom_point(alpha = 0.5)+
ylab("Activity BLUPs")+
xlab(expression(paste(dot(M), O["2,"][ave], " residuals")))+
annotate("text", x = 0.15, y = 0.05)+
theme_classic()
plot_act_MO2ave
plot_act_MO2ave<-ggplot(act_MO2ave, aes(x=resid_MO2ave, y=act_BLUP))+
geom_point(alpha = 0.5)+
ylab("Activity BLUPs")+
xlab(expression(paste(dot(M), O["2,"][ave], " residuals")))+
theme_classic()
plot_act_MO2ave
MO2min_resid<- data_frame(ID = Metabdata$Fish_ID,
resid_MO2min = resid(lmer_metab_full))
# merge BLUPs with MO2min residuals
act_MO2min<-merge(act_BLUPs, MO2min_resid, by = "ID")
cor.test(act_MO2min$act_BLUP,act_MO2min$resid_MO2min)
plot_act_MO2min<-ggplot(act_MO2min, aes(x=resid_MO2min, y=act_BLUP))+
geom_point(alpha = 0.5)+
ylab("Activity BLUPs")+
xlab(expression(paste(dot(M), O["2,"][min], " residuals")))+
annotate("text", x = 0.15, y = 0.05, label="r = 0.02, P = 0.85")+
theme_classic()
MO2min_resid<- data_frame(ID = Metabdata$Fish_ID,
resid_MO2min = resid(lmer_metab_full))
# merge BLUPs with MO2min residuals
act_MO2min<-merge(act_BLUPs, MO2min_resid, by = "ID")
cor.test(act_MO2min$act_BLUP,act_MO2min$resid_MO2min)
plot_act_MO2min<-ggplot(act_MO2min, aes(x=resid_MO2min, y=act_BLUP))+
geom_point(alpha = 0.5)+
ylab("Activity BLUPs")+
xlab(expression(paste(dot(M), O["2,"][min], " residuals")))+
annotate("text", x = 0.15, y = 0.05, label="r = 0.02, P = 0.85")+
theme_classic()
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Behav_Rlib_Feb19.RData")
############################################################################
### Models for behaviour data from angling selection experiment.
### Jenni Prokkola 2019
###
############################################################################
library(ggplot2)
#devtools::install_github("thomasp85/patchwork")
library(patchwork)
library(lme4)
library(lmerTest)
library(coxme)
library(survival)
library(lmfor)
library(nlme)
library(car)
library(tidyverse)
# Install source packages to use ggeffects:
#library(devtools)
#devtools::install_github("strengejacke/sjlabelled")
#devtools::install_github("strengejacke/sjmisc")
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
#devtools::install_github("strengejacke/sjstats")
#devtools::install_github("strengejacke/ggeffects")
library(ggeffects)
library(blmeco)
setwd("/Users/jenni/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/Github_repo/Datasets")
# Beh batch has two levels above 5, but with only 4 fish. These can be combined to batch 5 for the purpose of the analysis.
Behav_all$Beh_batch<-ifelse(Behav_all$Beh_batch >5, 5, Behav_all$Beh_batch)
Behav_all$Beh_batch<-as.factor(Behav_all$Beh_batch)
Behav_all$Arena<-as.factor(Behav_all$Arena)
Behav_all$ID<-as.factor(Behav_all$ID)
hist(Activity_data$Activity)
plot(fitted(lmer_act_all),resid(lmer_act_all, type="pearson"))
mywhiskers(fitted(lmer_act_all),resid(lmer_act_all, type="pearson"), add=T, se=F)
#Residuals and fitted values with lines to help visualization:
mywhiskers(fitted(lme_act_all),resid(lme_act_all, type="pearson"), add=T, se=F)
plot(fitted(lme_act_all),resid(lme_act_all, type="pearson"))
#Residuals and fitted values with lines to help visualization:
mywhiskers(fitted(lme_act_all),resid(lme_act_all, type="pearson"), add=T, se=F)
plot(fitted(lmer_act_all2),resid(lmer_act_all2, type="pearson"))
#Residuals and fitted values with lines to help visualization:
mywhiskers(fitted(lmer_act_all2),resid(lmer_act_all2, type="pearson"), add=T, se=F)
qqnorm(resid(lmer_act_all2, type="pearson"))
# Test population (use coef() to get names)
coef(lmer_act_all2)
View(exp_pred)
load("~/Dropbox/Taimenet/Paltamo2017_data/Jenni_Nico_Analyysit/PM_trials_results/Final_pm_BehModels_jenni.RData")
library(ggplot2)
library(lme4)
library(lmerTest)
library(coxme)
library(survival)
library(lmfor)
library(nlme)
leveneTest(Activity~Treatment, data = Only_activity)
